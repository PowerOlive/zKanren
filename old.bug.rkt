#lang racket
(require "constraint.rkt")
(require "goal.rkt")
(require "hash.rkt")
(require "id.rkt")
(require "state.rkt")
(require "stream.rkt")
(require "zk.rkt")
(require "prelude/unify.rkt")
(require "prelude/prelude.rkt")
(define s (new-state+ (goal+-s (fresh (x y) (== x y)))))
(define g (car (state-g s)))
(define sp (run-goal g))
(set! sp (state-patch-vs sp))
(set! sp (car sp))
;(patch-- (state '() (hash)) sp) ;;=>#f ;;BUG
(define gs (state-patch1-gs sp))
(define cs (state-patch1-cs sp))
(define ns (state '() (hash)))
(define nns (state (append gs (state-g ns)) (state-c ns)))
(s+c cs nns) ;;=>#f ;;BUG
